from aiogram import types, Dispatcher
from keyboards import client_menu
from handlers import functions as func
from aiogram.dispatcher.filters import Text
import sqlite3

call_add_task = None
call_check_task = None


async def command_start(message: types.Message):
	func.first_join(message.from_user.id, message.from_user.first_name, message.from_user.username)
	await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", reply_markup=client_menu.client_menu_kb)


async def add_task(message: types.Message):
	conn = sqlite3.connect('base.db')
	cursor = conn.cursor()
	data_executor = cursor.execute(f'SELECT * FROM users WHERE access_id = 10').fetchall()
	await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=func.add_task(data_executor))


async def callback_add_task(callback: types.CallbackQuery):
	global call_add_task
	call_add_task = int(callback.data.split("_")[1])
	await callback.answer()
	await callback.message.delete()
	await func.FSMAddTaskForExecutor.short_name.set()
	await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <b>\"–æ—Ç–º–µ–Ω–∞\"</b>", parse_mode="HTML")


async def check_tasks(message: types.Message):
	conn = sqlite3.connect('base.db')
	cursor = conn.cursor()
	data_tasks = cursor.execute('SELECT * FROM tasks WHERE client_id = ? AND status != "–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ"', [message.from_user.id]).fetchall()
	await message.answer("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", reply_markup=func.check_tasks(data_tasks))


async def callback_check_tasks(callback: types.CallbackQuery):
	conn = sqlite3.connect('base.db')
	cursor = conn.cursor()
	global call_check_task
	call_check_task = int(callback.data.split("_")[1])
	await callback.answer()
	await callback.message.delete()
	short_name = cursor.execute(f'SELECT short_name FROM tasks WHERE id = {call_check_task}').fetchone()[0]
	description = cursor.execute(f'SELECT description FROM tasks WHERE id = {call_check_task}').fetchone()[0]
	deadline = cursor.execute(f'SELECT deadline FROM tasks WHERE id = {call_check_task}').fetchone()[0]
	status = cursor.execute(f'SELECT status FROM tasks WHERE id = {call_check_task}').fetchone()[0]
	executor = cursor.execute(f'SELECT executor FROM tasks WHERE id = {call_check_task}').fetchone()[0]
	await callback.message.answer(
		f"<b>–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {short_name}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline}\n<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {executor}",
		reply_markup=client_menu.info_about_task, parse_mode='HTML')


async def callback_edit_task(callback: types.CallbackQuery):
	conn = sqlite3.connect('base.db')
	cursor = conn.cursor()

	if callback.data == "edit_short_name":
		await callback.answer()
		await callback.message.delete()
		await func.FSMEditShortName.edit_short_name.set()
		await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <b>\"–æ—Ç–º–µ–Ω–∞\"</b>", parse_mode="HTML")

	if callback.data == "edit_description":
		await callback.answer()
		await callback.message.delete()
		await func.FSMEditDescription.edit_description.set()
		await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <b>\"–æ—Ç–º–µ–Ω–∞\"</b>", parse_mode="HTML")

	if callback.data == "edit_deadline":
		await callback.answer()
		await callback.message.delete()
		await func.FSMEditDeadline.edit_deadline.set()
		await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <b>\"–æ—Ç–º–µ–Ω–∞\"</b>", parse_mode="HTML")

	if callback.data == "delete_task":
		await callback.answer()
		await callback.message.delete()
		name = cursor.execute(f'SELECT short_name FROM tasks WHERE id = {call_check_task}').fetchone()[0]
		await callback.message.answer(f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{name}"?',
		                              reply_markup=client_menu.delete_task_inb)

	if callback.data == "yes":
		await callback.answer()
		await callback.message.delete()
		name = cursor.execute(f'SELECT short_name FROM tasks WHERE id = {call_check_task}').fetchone()[0]
		cursor.execute(f"DELETE FROM tasks WHERE id = {call_check_task}")
		conn.commit()
		await callback.message.answer(f"–ó–∞–¥–∞—á–∞ {name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")

	if callback.data == "no":
		await callback.answer()
		await callback.message.delete()
		name = cursor.execute(f'SELECT short_name FROM tasks WHERE id = {call_check_task}').fetchone()[0]
		description = cursor.execute(f'SELECT description FROM tasks WHERE id = {call_check_task}').fetchone()[0]
		deadline = cursor.execute(f'SELECT deadline FROM tasks WHERE id = {call_check_task}').fetchone()[0]
		status = cursor.execute(f'SELECT status FROM tasks WHERE id = {call_check_task}').fetchone()[0]
		executor = cursor.execute(f'SELECT executor FROM tasks WHERE id = {call_check_task}').fetchone()[0]
		await callback.message.answer(
			f"<b>–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline}\n<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {executor}",
			reply_markup=client_menu.info_about_task, parse_mode='HTML')


def register_handler_client(dp: Dispatcher):
	dp.register_message_handler(command_start, commands=["start"])
	dp.register_message_handler(add_task, text=["üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üìù"])
	dp.register_callback_query_handler(callback_add_task, Text(startswith='add-task_'), state=None)
	dp.register_message_handler(check_tasks, text=["üëÅ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á üëÅ"])
	dp.register_callback_query_handler(callback_check_tasks, Text(startswith='check-task_'))
	dp.register_callback_query_handler(callback_edit_task, text=["edit_short_name", "edit_description",
	                                                             "edit_deadline", "delete_task", "yes", "no"])
